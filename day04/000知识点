本节
    组件的引用
    组件间的传参
回顾
    {{}}
    声明式指令系统
    数据属性
    MVVM
    核心思想--数据驱动视图
    父级往子级传值---使用props

    子级往父级传值---使用自定义事件--this.$emit()

本节--写一个markdown编辑器
    写好样式
    安装marked
        cnpm install marked --save
    引入
        import Marked from "marked"
    v-model

    处理数据
        computed：{

        }
    v-html

本节--路由--单页面应用
    官网--生态系统--核心插件--Vue Router（路由）

    Javascript
        // 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)

        // 1. 定义 (路由) 组件。
        // 可以从其他文件 import 进来
        const Foo = { template: '<div>foo</div>' }
        const Bar = { template: '<div>bar</div>' }

        // 2. 定义路由
        // 每个路由应该映射一个组件。 其中"component" 可以是
        // 通过 Vue.extend() 创建的组件构造器，
        // 或者，只是一个组件配置对象。
        // 我们晚点再讨论嵌套路由。
        const routes = [
        { path: '/foo', component: Foo },
        { path: '/bar', component: Bar }
        ]

        // 3. 创建 router 实例，然后传 `routes` 配置
        // 你还可以传别的配置参数, 不过先这么简单着吧。
        const router = new VueRouter({
        routes // (缩写) 相当于 routes: routes
        })

        // 4. 创建和挂载根实例。
        // 记得要通过 router 配置参数注入路由，
        // 从而让整个应用都有路由功能
        const app = new Vue({
        router
        }).$mount('#app')

    html
        <!-- 使用 router-link 组件来导航. -->
            <!-- 通过传入 `to` 属性指定链接. -->
            <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
            <router-link to="/foo">Go to Foo</router-link>
            <router-link to="/bar">Go to Bar</router-link>
            </p>
        <!-- 路由出口 -->
        <!-- 路由匹配到的组件将渲染在这里 -->
            <router-view></router-view>

    去除#
        在
        const router = new VueRouter({
            mode:"history",

            routes // (缩写) 相当于 routes: routes
            })
        加入
        mode:"history"



